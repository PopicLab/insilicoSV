import sys

def get_header():
    return ("version 1.0\n"
              "# -------- AUTOGENERATED FILE --------\n"
              "import \"insilicosv_tree_level_workflow.wdl\" as insilico_tree\n"
              "workflow GenomeMix {\n"
              "input { \n"
              "\tString outDir\n"
              "\tString reference\n"
              "\tArray[File] configs\n"
              "\tArray[Array[Int]] genomes\n"
              "}\n"
            )

def get_tree_level_block(level):
    return ("call insilico_tree.SimulateLineageTreeLevel as TreeLevel%d {\n"
            "\tinput:\n"
            "\t\toutDir = outDir,\n"
            "\t\tgenomes = genomes,\n"
            "\t\tinsilicoConfigs = configs,\n"
            "\t\ttreeLevel = %d,\n"
            "\t\toriginalRef = reference"
            "%s"
            "}\n" % (level, level, ",\n\t\tpreviousRef = TreeLevel%d.ref\n" % (level - 1) if level > 0 else "\n")
    )

def get_output_block():
    block = ""
    for i in range(max_tree_depth):
        block += "\tArray[File] ref%d = TreeLevel%d.ref\n\tArray[File] vcf%d = TreeLevel%d.vcf\n" % (i, i, i, i)
    return "output {\n%s}\n}\n" % block

max_tree_depth = int(sys.argv[1])
workflow_name = "insilicosv_lineage_workflow_%d.wdl" % max_tree_depth
with open(workflow_name, "w") as f:
    f.write(get_header() + "\n".join(get_tree_level_block(i) for i in range(max_tree_depth)) + get_output_block())